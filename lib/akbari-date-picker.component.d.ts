import { OnInit, ElementRef, EventEmitter } from '@angular/core';
import { DatepickerModel } from './model/date-picker-model';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any;
export declare class AkbariDatePickerComponent implements ControlValueAccessor, OnInit {
    days: Array<DatepickerModel>;
    weekDay: string[];
    faWeekDay: string[];
    faMonths: string[];
    faYears: any[];
    date: any;
    fromYear: number;
    toYear: number;
    minDate: any;
    maxDate: any;
    years_s: ElementRef;
    month_s: ElementRef;
    datepicker_s: ElementRef;
    datepickerInput_s: ElementRef;
    datepickerParent_s: ElementRef;
    selectedMonth: string;
    selectedMonthNumber: number;
    selectedYear: number;
    selectedDay: number;
    minMonth: number;
    minDay: number;
    onChangeDate: EventEmitter<any>;
    constructor();
    set_date(): void;
    s(): void;
    minMaxDate(): void;
    ngOnInit(): void;
    nextMonth(): void;
    prevMonth(): void;
    setYears(): void;
    generate(add_count: any): void;
    getDate(): void;
    changeMonth(event: any): void;
    changeYear(event: any): void;
    getDetail(): {
        month: string;
        year: string;
        day: string;
    };
    selectDay(item: DatepickerModel): void;
    formatDate(year: any, month: any, day: any): string;
    addZero(value: number): string | number;
    open(): void;
    close(): void;
    private innerValue;
    private onTouchedCallback;
    private onChangeCallback;
    get selectedDate(): any;
    set selectedDate(v: any);
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AkbariDatePickerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AkbariDatePickerComponent, "akbari-date-picker", never, { "date": "date"; "minDate": "minDate"; "maxDate": "maxDate"; }, { "onChangeDate": "onChangeDate"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWtiYXJpLWRhdGUtcGlja2VyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJha2JhcmktZGF0ZS1waWNrZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVwaWNrZXJNb2RlbCB9IGZyb20gJy4vbW9kZWwvZGF0ZS1waWNrZXItbW9kZWwnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgQ1VTVE9NX0lOUFVUX0NPTlRST0xfVkFMVUVfQUNDRVNTT1I6IGFueTtcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQWtiYXJpRGF0ZVBpY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkluaXQge1xyXG4gICAgZGF5czogQXJyYXk8RGF0ZXBpY2tlck1vZGVsPjtcclxuICAgIHdlZWtEYXk6IHN0cmluZ1tdO1xyXG4gICAgZmFXZWVrRGF5OiBzdHJpbmdbXTtcclxuICAgIGZhTW9udGhzOiBzdHJpbmdbXTtcclxuICAgIGZhWWVhcnM6IGFueVtdO1xyXG4gICAgZGF0ZTogYW55O1xyXG4gICAgZnJvbVllYXI6IG51bWJlcjtcclxuICAgIHRvWWVhcjogbnVtYmVyO1xyXG4gICAgbWluRGF0ZTogYW55O1xyXG4gICAgbWF4RGF0ZTogYW55O1xyXG4gICAgeWVhcnNfczogRWxlbWVudFJlZjtcclxuICAgIG1vbnRoX3M6IEVsZW1lbnRSZWY7XHJcbiAgICBkYXRlcGlja2VyX3M6IEVsZW1lbnRSZWY7XHJcbiAgICBkYXRlcGlja2VySW5wdXRfczogRWxlbWVudFJlZjtcclxuICAgIGRhdGVwaWNrZXJQYXJlbnRfczogRWxlbWVudFJlZjtcclxuICAgIHNlbGVjdGVkTW9udGg6IHN0cmluZztcclxuICAgIHNlbGVjdGVkTW9udGhOdW1iZXI6IG51bWJlcjtcclxuICAgIHNlbGVjdGVkWWVhcjogbnVtYmVyO1xyXG4gICAgc2VsZWN0ZWREYXk6IG51bWJlcjtcclxuICAgIG1pbk1vbnRoOiBudW1iZXI7XHJcbiAgICBtaW5EYXk6IG51bWJlcjtcclxuICAgIG9uQ2hhbmdlRGF0ZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICBjb25zdHJ1Y3RvcigpO1xyXG4gICAgc2V0X2RhdGUoKTogdm9pZDtcclxuICAgIHMoKTogdm9pZDtcclxuICAgIG1pbk1heERhdGUoKTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZXh0TW9udGgoKTogdm9pZDtcclxuICAgIHByZXZNb250aCgpOiB2b2lkO1xyXG4gICAgc2V0WWVhcnMoKTogdm9pZDtcclxuICAgIGdlbmVyYXRlKGFkZF9jb3VudDogYW55KTogdm9pZDtcclxuICAgIGdldERhdGUoKTogdm9pZDtcclxuICAgIGNoYW5nZU1vbnRoKGV2ZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgY2hhbmdlWWVhcihldmVudDogYW55KTogdm9pZDtcclxuICAgIGdldERldGFpbCgpOiB7XHJcbiAgICAgICAgbW9udGg6IHN0cmluZztcclxuICAgICAgICB5ZWFyOiBzdHJpbmc7XHJcbiAgICAgICAgZGF5OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgc2VsZWN0RGF5KGl0ZW06IERhdGVwaWNrZXJNb2RlbCk6IHZvaWQ7XHJcbiAgICBmb3JtYXREYXRlKHllYXI6IGFueSwgbW9udGg6IGFueSwgZGF5OiBhbnkpOiBzdHJpbmc7XHJcbiAgICBhZGRaZXJvKHZhbHVlOiBudW1iZXIpOiBzdHJpbmcgfCBudW1iZXI7XHJcbiAgICBvcGVuKCk6IHZvaWQ7XHJcbiAgICBjbG9zZSgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBpbm5lclZhbHVlO1xyXG4gICAgcHJpdmF0ZSBvblRvdWNoZWRDYWxsYmFjaztcclxuICAgIHByaXZhdGUgb25DaGFuZ2VDYWxsYmFjaztcclxuICAgIGdldCBzZWxlY3RlZERhdGUoKTogYW55O1xyXG4gICAgc2V0IHNlbGVjdGVkRGF0ZSh2OiBhbnkpO1xyXG4gICAgb25CbHVyKCk6IHZvaWQ7XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xyXG59XHJcbiJdfQ==