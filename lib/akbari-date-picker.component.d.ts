import { OnInit, ElementRef, EventEmitter } from '@angular/core';
import { DatepickerModel } from './model/date-picker-model';
import { ControlValueAccessor } from '@angular/forms';
export declare const CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: any;
export declare class AkbariDatePickerComponent implements ControlValueAccessor, OnInit {
    days: Array<DatepickerModel>;
    weekDay: string[];
    faWeekDay: string[];
    faMonths: string[];
    faYears: any[];
    date: any;
    fromYear: number;
    toYear: number;
    minDate: any;
    maxDate: any;
    years_s: ElementRef;
    month_s: ElementRef;
    datepicker_s: ElementRef;
    datepickerInput_s: ElementRef;
    datepickerParent_s: ElementRef;
    selectedMonth: string;
    selectedMonthNumber: number;
    selectedYear: number;
    selectedDay: number;
    minMonth: number;
    minDay: number;
    onChangeDate: EventEmitter<any>;
    constructor();
    set_date(): void;
    s(): void;
    minMaxDate(): void;
    ngOnInit(): void;
    nextMonth(): void;
    prevMonth(): void;
    setYears(): void;
    generate(add_count: any): void;
    getDate(): void;
    changeMonth(event: any): void;
    changeYear(event: any): void;
    getDetail(): {
        month: string;
        year: string;
        day: string;
    };
    selectDay(item: DatepickerModel): void;
    formatDate(year: any, month: any, day: any): string;
    addZero(value: number): string | number;
    open(): void;
    close(): void;
    private innerValue;
    private onTouchedCallback;
    private onChangeCallback;
    get selectedDate(): any;
    set selectedDate(v: any);
    onBlur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
}
